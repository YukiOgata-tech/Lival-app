rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSigned() { return request.auth != null;}
    function isMember(roomId) {
      return isSigned()
        && exists(/databases/$(database)/documents/rooms/$(roomId))
        && request.auth.uid in get(/databases/$(database)/documents/rooms/$(roomId)).data.members;
    }
    function isHost(roomId) {
      return isSigned()
        && get(/databases/$(database)/documents/rooms/$(roomId)).data.hostUserId == request.auth.uid;
    }
    /* masters */
    match /masters/{docId} {
      allow read:  if true;
      allow write: if false;
    }
    /* ──── users ─── */
    match /users/{userId} {
      allow read:  if true;
      allow write, create: if true;
      allow update: if isSigned() && request.auth.uid == userId
        && request.resource.data.diff(resource.data).changedKeys().hasOnly([
          'displayName', 'bio', 'photoURL', 'gender', 'birthday',
          'expoPushTokens', 'updatedAt',
        ]);
      // Functions専用
      match /xpLedger/{entryId} {
        allow read: if isSigned() && request.auth.uid == userId;
        allow write: if false;
      }
      match /friends/{friendId} {
        allow read:  if isSigned() && request.auth.uid == userId;
        allow write: if false;
      }

      match /friendRequests/{senderId} {
        function isSender()   { return isSigned() && request.auth.uid == senderId; }
        function isReceiver() { return isSigned() && request.auth.uid == userId; }
        allow create: if isSender() && userId != senderId;  // 自分宛以外へ送信
        allow read:   if isSender() || isReceiver();
        allow update: if isReceiver();                      // 受理/拒否
        allow delete: if isSender() || isReceiver();
      }
    }
    // roomInvites：招待の可視/更新
    match /roomInvites/{inviteId} {
      allow read: if request.auth != null
        && (request.auth.uid == resource.data.receiverId
            || request.auth.uid == resource.data.senderId);
      allow create: if request.auth != null
        && request.auth.uid == request.resource.data.senderId;
      allow update: if request.auth != null
        && request.auth.uid == resource.data.receiverId; // 承諾/辞退
    }
    /* ───── rooms ───── */
    match /rooms/{roomId} {
      allow create: if isSigned()
        && request.resource.data.hostUserId == request.auth.uid
        && request.resource.data.members is list
      allow read:  if isSigned();
      allow update: if isSigned() && (
        (isHost(roomId) &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly([
            'segmentMode','segmentMinutes','segmentStartedAt','segmentIndex',
            'status','sessionForceEndedAt','updatedAt'
          ]))
         ||
         // 自分の既読フラグだけは本人が付けられる
        (request.resource.data.keys().hasOnly(['seenBy','updatedAt']) &&
         request.resource.data.seenBy[request.auth.uid] == true)
        );
      allow write: if isSigned();
      
      match /_settlements/{sid} {
        // ルームメンバーなら誰でも作成可
        allow create: if request.auth != null &&
        request.auth.uid in get(/databases/$(db)/documents/rooms/$(roomId)).data.members;
        allow read, update, delete: if false;
        }

      /* グループチャット：メンバーのみ */
      match /groupChats/{messageId} {
        allow read:   if isMember(roomId);
        allow create: if isMember(roomId);
        // 自分の発言のみ編集/削除（ログは userId=null 想定なので事実上編集不可）
        allow update, delete: if isMember(roomId)
          && request.auth.uid == resource.data.userId;
      }

      /* AIチャット */
      match /aiChats/{uid}/messages/{messageId} {
        // 自分の部屋・自分の aiChats だけ
        allow read:   if isMember(roomId) && request.auth.uid == uid;
        allow create: if isMember(roomId) && request.auth.uid == uid
          && request.resource.data.userId == request.auth.uid;
          // 自分のメッセージだけ編集/削除
        allow update, delete: if isMember(roomId) && request.auth.uid == uid
          && resource.data.userId == request.auth.uid;
      }
      match /presence/{uid} {
        allow read:  if isMember(roomId);
        allow write: if isMember(roomId) && request.auth.uid == uid;
          match /stays/{stayId} {
            allow read:  if isMember(roomId);
            allow write: if isMember(roomId) && request.auth.uid == uid;
          }
      }
      match /results/{docId} {
        allow read:  if isMember(roomId);
        allow write: if isMember(roomId);
      }
      match /tasks/{taskId} {
        allow read:  if isMember(roomId);
        allow write: if isMember(roomId);
      }
      // ランキングの並び（任意）：ホストのみが作成/更新可
      match /ranking/{docId} {
        allow read: if isSigned();
        allow write: if isSigned();
      }
      match /invites/{inviteId} {
        // 作成（RoomCreateForm から）
        allow create: if isSigned()
          && request.resource.data.fromUid == request.auth.uid
          && (
               (request.resource.data.toUids is list && request.resource.data.toUids.size() > 0)
               || (request.resource.data.toUid is string && request.resource.data.toUid.size() > 0)
             );
        // 読み取り：ホスト or 自分宛て
        allow read: if isSigned() && (
          isHost(roomId) ||
          (resource.data.toUid == request.auth.uid) ||
          (resource.data.toUids is list && request.auth.uid in resource.data.toUids)
        );
        // クライアントからの更新/削除は不可（通知済みフラグ等は Functions が実施）
        allow update, delete: if false;
      }
    }
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
